//1.finds the maximum sum of a contiguous subarray of size k (using sliding window)

method: 1

package basics;
public class Test2 {
    public static int maxsubarray(int k, int[] a) {
        int maxSum = Integer.MIN_VALUE;
        int windowSum = 0;

        for(int i = 0; i < k; i++) {
            windowSum += a[i];
        }
        maxSum = windowSum;

        for(int i = k; i < a.length; i++) {
            windowSum += a[i] - a[i - k];
            maxSum = Math.max(maxSum, windowSum);
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[] a = {100, 900, 200, 300, 400, 800};
        int k = 2;
        System.out.println("Maximum sum of " + k + " consecutive elements is: " + maxsubarray(k, a));
    }
}

method 2:(using recursion)

package basics;

import java.util.Arrays;
//maximun subarray with window size (sliding window)
public class Test2 {
	static int maxSum=Integer.MIN_VALUE;
public static int maxsubarray(int k, int[] a, int LeftPointer, int RightPointer) {
	if(RightPointer==a.length) return maxSum;
	if(RightPointer-LeftPointer+1==k) {
		int windowSum=0;
		for(int i=LeftPointer;i<=RightPointer;i++) {
			windowSum+=a[i];
			maxSum=Math.max(maxSum, windowSum);
		}
	}
	return maxsubarray(k, a,LeftPointer+1,RightPointer+1);
}
	public static void main(String[] args) {
		// TODO Auto-generated method stub=
		int[] a= {100,900,200,300,400,800};
		int k=3;
		System.out.println(maxsubarray(k, a, 0, k-1));
		
	}

}

//2. maxele – Finds and prints the maximum element in each window.
//   minele – Finds and prints the minimum element in each window.
//   mostneg – Finds and prints the smallest (most negative) element in each window, or 0 if there is no negative element in that window.

method - 1 (using recursion)

package basics;

public class Test4{

    public static void maxele(int[] a, int k, int LeftPointer, int RightPointer) {
        if (RightPointer == a.length) return; 

        if (RightPointer - LeftPointer + 1 == k) {
            int maxInWindow = Integer.MIN_VALUE;
            for (int i = LeftPointer; i <= RightPointer; i++) {
                maxInWindow = Math.max(maxInWindow, a[i]);
            }
            System.out.println(maxInWindow);
        }

        maxele(a, k, LeftPointer + 1, RightPointer + 1);
    }

    public static void minele(int[] a, int k, int LeftPointer, int RightPointer) {
        if (RightPointer == a.length) return;

        if (RightPointer - LeftPointer + 1 == k) {
            int minInWindow = Integer.MAX_VALUE;
            for (int i = LeftPointer; i <= RightPointer; i++) {
                minInWindow = Math.min(minInWindow, a[i]);
            }
            System.out.println(minInWindow);
        }

        minele(a, k, LeftPointer + 1, RightPointer + 1);
    }
    
    public static void mostneg(int[] a, int k, int LeftPointer, int RightPointer) {
        if (RightPointer == a.length) return;

        if (RightPointer - LeftPointer + 1 == k) {
            int minInWindow = 0;
            for (int i = LeftPointer; i <= RightPointer; i++) {
                minInWindow = Math.min(minInWindow, a[i]);
            }
            System.out.println(minInWindow);
        }

        mostneg(a, k, LeftPointer + 1, RightPointer + 1);
    }

    public static void main(String[] args) {
        int[] a = {1, 9, 8, -5, 3, 2, 8};
        int k = 2;

        System.out.println("Max elements in each subarray:");
        maxele(a, k, 0, k - 1);

        System.out.println("-------------------");

        System.out.println("Min elements in each subarray:");
        minele(a, k, 0, k - 1);
        
        System.out.println("----------------------------");
        System.out.println("most negative number else print 0: ");
        mostneg(a, k, 0, k-1);
    }
}
method - 2: using loops

package basics;

public class Test5 {

    public static void maxele(int[] a, int k) {
        System.out.println("Max elements in each subarray:");
        for (int LeftPointer = 0; LeftPointer <= a.length - k; LeftPointer++) {
            int maxInWindow = Integer.MIN_VALUE;
            for (int i = LeftPointer; i < LeftPointer + k; i++) {
                maxInWindow = Math.max(maxInWindow, a[i]);
            }
            System.out.println(maxInWindow);
        }
    }

    public static void minele(int[] a, int k) {
        System.out.println("Min elements in each subarray:");
        for (int LeftPointer = 0; LeftPointer <= a.length - k; LeftPointer++) {
            int minInWindow = Integer.MAX_VALUE;
            for (int i = LeftPointer; i < LeftPointer + k; i++) {
                minInWindow = Math.min(minInWindow, a[i]);
            }
            System.out.println(minInWindow);
        }
    }

    public static void mostneg(int[] a, int k) {
        System.out.println("Most negative number else print 0:");
        for (int LeftPointer = 0; LeftPointer <= a.length - k; LeftPointer++) {
            int minNeg = 0;
            for (int i = LeftPointer; i < LeftPointer + k; i++) {
                minNeg=Math.min(minNeg, a[i]);
            }
            System.out.println(minNeg);
        }
    }

    public static void main(String[] args) {
        int[] a = {1, 9, 8, -5,-2, 3, 2, 8};
        int k = 2;

        maxele(a, k);
        System.out.println("-------------------");
        minele(a, k);
        System.out.println("-------------------");
        mostneg(a, k);
    }
}

//3. access all elements, find particular element, to get sum of array elements, max and min val in arr, reverse array, swapping two numbers simultaneously, shifting the array

package basics;
import java.util.Arrays;

public class Test1 {
public static void accesselements(int [] ar1) {
	for(int i=0; i<=ar1.length-1;i++) {
		System.out.println(ar1[i]);
	}
}
public static void findelementindex(int [] ar1) {
	for(int i=0;i<=ar1.length-1;i++) {
		if(ar1[i]==9) System.out.println(i);
	}
}
public static void sumofarr(int [] ar) {
	int sum=0;
	for (int i=0;i<ar.length;i++) {
		sum+=ar[i];
	}
	System.out.println(sum);
}
public static void maxandminele(int[] ar) {
	int a= Integer.MIN_VALUE;
	int b=Integer.MAX_VALUE;
	System.out.println(b);
	for(int i:ar) {//here i is a value not index
		if(a<i) {
			a=i;
		}
		if(b>i) {
			b=i;
		}
	}
	System.out.println("max val:"+a);
	System.out.println(("min val:"+b));	
}
public static void revsarr(int[] ar) {
	int[] a=new int[ar.length];
	int i=0;
	int j=ar.length-1;
	while(i<ar.length) {
		a[j]=ar[i];
		i++;
		j--;
	}
	System.out.println(Arrays.toString(a));
}
public static void revsarrr(int[] ar) {
	int temp;
	for(int i=0;i<ar.length/2;i++) {
		temp=ar[i];
		ar[i]=ar[ar.length-i-1];
		ar[ar.length-i-1]=temp;
	}
	System.out.println("reversed array : "+Arrays.toString(ar));
}

public static void arrrevs(int[] ar, int start, int end) {
    int temp;
    while (start < end) {
        temp = ar[start];
        ar[start] = ar[end];
        ar[end] = temp;
        start++;
        end--;
    }
}

public static void shiftright(int k, int [] arr) {
	int n=arr.length;
	k=k%n;
	arrrevs(arr, 0, n-1);
	arrrevs(arr, 0, k-1);
	arrrevs(arr,k,n-1);
	System.out.println("shifted with amt of "+k+": "+Arrays.toString(arr));
}

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int [] ar1= {1,2,3,10,4,0,5,1,9,6,9};
		System.out.println(Arrays.toString(ar1));
//		accesselements(ar1);//access all elements
//		findelementindex(ar1);//find particular element
//		sumofarr(ar1);//to get sum of array elements
//		maxandminele(ar1);//max and min val in arr
//		revsarr(ar1);//reverse array
		revsarrr(ar1);//swapping two numbers simultaneously
//		shiftright(2, ar1);
	}

}

// 4.move zeros to right 

package basics;

import java.util.Arrays;

// move zeros 
public class Test8 {
public static void zeros(int[] arr) {
	int count=0;
	for(int i=0;i<arr.length;i++) {
		if(arr[i]!=0) {
			arr[count++]=arr[i];
		}
	}
	while(count<arr.length) {
		arr[count]=0;
		count++;
	}
	System.out.println(Arrays.toString(arr));
}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] ar= {0,1,2,0,5,2,7,0,5,0,2,3,4};
		zeros(ar);
	}

}

//5. Find index Pairs With Target Sum 

package basics;

import java.util.Arrays;

public class Test8 {
public static void findtarget(int[] arr, int target) {
	for(int i=0;i<arr.length;i++) {
		for(int j=0;j<arr.length;j++) {
			if(arr[i]+arr[j]==target && arr[i]!=arr[j] && j>i) {
				System.out.println("index are: "+i+" "+j);
			}
		}
	}
}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] ar= {1,2,3,4,5,6,7,8,9};
		findtarget(ar, 6);
	}

}

//6. finds the maximum element in a 2D array

package basics;

public class Test7 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][]arr= {{10,20,30},{40,60,70},{80,90,100}};
		int max=Integer.MIN_VALUE;
		for(int i=0;i<arr.length;i++) {
			for(int j=0;j<arr[i].length;j++) {
				max=Math.max(max, arr[i][j]);
				
			}
			System.out.println(max);
		}
	}
}

//7. prints the elements of a 2D array in a zigzag (or snake-like) order — even-indexed rows are printed left to right, and odd-indexed rows are printed right to left.

package basics;

public class Test7 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][]arr= {{10,20,30},{40,60,70},{80,90,100}};
		for(int i=0;i<arr.length;i++) {
			if(i%2!=0) {
				for(int j=arr[i].length-1;j>=0;j--) {
					System.out.print(arr[i][j]+" ");
				}
			}
			else {
				for(int j=0;j<arr[i].length;j++) {
					System.out.print(arr[i][j]+ " ");
				}
			}
			System.out.println();
			
		}
			}

}

//8. the sums of the primary and secondary diagonals in a square 2D array

1st method: 

package basics;

public class Test7 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][]arr= {{10,20,30},{40,60,70},{80,90,100}};
		int primarydiagonal=0;
		for(int i=0;i<arr.length;i++) {
			for(int j=i;j<=i;j++) {
				primarydiagonal+=arr[i][j];
				
			}
		}
		System.out.println(primarydiagonal);
		int secondarydiagonal=0;
		for(int i=0;i<arr.length;i++) {
			for(int j=arr.length-i-1;j==arr.length-1-i;j--) {
				secondarydiagonal+=arr[i][j];
				
			}
		}
		System.out.println(secondarydiagonal);
	}	
}
}

2nd method:

package basics;

import java.util.Arrays;

public class Test8 {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] arr = {
			    {10, 20, 30},
			    {40, 50, 70},
			    {80, 90, 100}
			};

		int primarydiagonal = 0;
		int secondarydiagonal = 0;

		for(int i = 0; i < arr.length; i++) {
		    primarydiagonal += arr[i][i];
		    secondarydiagonal += arr[i][arr.length - 1 - i];
		}

		System.out.println("Primary diagonal sum: " + primarydiagonal);
		System.out.println("Secondary diagonal sum: " + secondarydiagonal);

	}

}

//9. reverses each word in the input string separately while keeping the order of the words intact.	

package basics;

public class Test3 {
	public static void reverse(String s) {
	    String[] str = s.split(" ");
	    for (int i = 0; i < str.length; i++) {
	        for (int j = str[i].length() - 1; j >= 0; j--) {
	            System.out.print(str[i].charAt(j));
	        }
	        System.out.print(" "); // Add space between reversed words
	    }
	    
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String s="Java is a Programming Language";
		reverse(s);

	}

}

//10. first non repeated characters in a string:

package basics;
public class Test6 {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String str="encyclopedia";
		for(int i=0;i<str.length();i++) {
			if(str.indexOf(str.charAt(i))==str.lastIndexOf(str.charAt(i))) {
				System.out.println(str.charAt(i));
				break;
			}
		}
	}
}

//11. This program tries to determine if two strings are anagrams by: Summing their ASCII values (count1 and count2). Counting how many characters from str1 match those in str2 (count). Checking if both sums are equal and all characters match.
(anagrams: An anagram is a word or phrase formed by rearranging the letters of another word or phrase, using all the original letters exactly once.)

package basics;
public class Test6 {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String str1="ad";
		String str2="bc";
		int count1 =0;
		int count2=0;
		int count=0;
		if(str1.length()==str2.length()) {
			for(int i=0;i<str1.length();i++) {
				count1+=str1.charAt(i);
				count2+=str2.charAt(i);
				for(int j=0;j<str2.length();j++) {
					if(str1.charAt(i)==str2.charAt(j))
						count++;
				}
			}
		}
		System.out.println(count1+" "+count2);
		System.out.println((count1==count2)&&(count==str1.length()));
	}
}

//12. find the length of the longest common prefix among the strings in the array
It sorts the strings lexicographically (based on asci values of first character)
It takes the first string (str[0]) and generates all possible prefixes.
It checks for each prefix if the other strings start with it using startsWith().
It keeps track of the longest prefix length in minval.

package basics;
import java.util.Arrays;
public class Test6 {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String[] str= {"app","ap","apple"};
		Arrays.sort(str);
		System.out.println(Arrays.toString(str));
		int minval=Integer.MIN_VALUE;
		for(int i=0;i<str[0].length();i++) {
			String commonprefixes=str[0].substring(0,i+1);
			for(int j=1;j<str.length;j++) {
				if(str[j].startsWith(commonprefixes)) {
					if(minval<commonprefixes.length()) {
						minval=commonprefixes.length();
					}
				}
			}
		}
		System.out.println(minval);
	}
}

//13. finds the longest palindrome among all strings in the array

package basics;
public class Test6 {
	public static boolean ispalandromic(String str) {
		String rev="";
		for(int i=str.length()-1;i>=0;i--) {
			rev=rev+str.charAt(i);
		}
		return rev.equals(str);
	}
	public static String longestPlandromicSubString(String str) {
		int maxLength=Integer.MIN_VALUE;
		String LongestSubString="";
		for(int i=0;i<str.length();i++) {
			for(int j=i+1;j<=str.length();j++) {
				String SubString=str.substring(i,j);
				if(ispalandromic(SubString)) {
					if(SubString.length()>maxLength) {
						maxLength=SubString.length();
						LongestSubString=SubString;
					}	
				}
			}
		}
		return LongestSubString;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String[] Str= {"abcbada","qwewqu","poiuyuiopo"};
		String LongestString="";
		int maxLength=Integer.MIN_VALUE;
		for(int i=0; i<Str.length;i++) {
			String str=longestPlandromicSubString(Str[i]);
			if(str.length()>maxLength) {
				maxLength=str.length();
				LongestString=str;
			}
			
		}
		System.out.println(LongestString);
	}
}

//14. printing all substrings that have no repeated characters.

package basics;
import java.util.*;
public class Test7 {
	public static void NoduplicateSubstring(String str) {
		for(int i=0;i<str.length();i++) {
			for(int j=i;j<=str.length();j++) {
//				System.out.println(str.charAt(i)+" "+str.charAt(j));
				String str2=str.substring(i,j);
				if(Nonrepeatedcharacter(str2)) {
					System.out.println(str2);
				}
			}
		}
	}
	public static boolean Nonrepeatedcharacter(String str) {
		for(int i=0;i<str.length();i++) {
			if(str.indexOf(str.charAt(i))!=str.lastIndexOf(str.charAt(i))) {
				return false;
			}
		}
		return true;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String Str= "abcdabefga";
		NoduplicateSubstring(Str);
	}

}

//15. Count the frequency of each character in the input string, print repeated character, non repeated character

package basics;

import java.util.LinkedHashMap;
import java.util.Map;

public class Test8 {
	public static void getFreqency(String str) {
		Map<Character, Integer> map=new LinkedHashMap<>();
		for(int i=0;i<str.length();i++) {
			if(map.containsKey(str.charAt(i))) {
				map.put(str.charAt(i), map.get(str.charAt(i))+1);
			}
			else {
				map.put(str.charAt(i), map.getOrDefault(str.charAt(i),1));
			}
		}
//		System.out.println("count of character");
//		System.out.println("repeated character");
		System.out.println("non-repeated character");
		for(Map.Entry<Character, Integer> entry:map.entrySet()) {
//			System.out.println(entry.getKey()+" "+entry.getValue());//count of character
			
//			if(entry.getValue()>1) {
//				System.out.println(entry.getKey());//repeated character
//			}
//			
			if(entry.getValue()==1) {	
				System.out.println(entry.getKey());//non-repeated character
			}
		}
	}
public static void main(String[] args) {
	String str="karthik";
	getFreqency(str);
}
}










